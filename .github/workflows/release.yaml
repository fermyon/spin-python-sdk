name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  cpython:
    name: Build CPython
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup WASI-SDK
        shell: bash
        run: |
          cd /tmp
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-linux.tar.gz
          tar -xf wasi-sdk-16.0-linux.tar.gz
          cp -r wasi-sdk-16.0 /opt/wasi-sdk

      - name: Build CPython
        shell: bash
        run: |
          git submodule update --init --recursive
          mkdir -p cpython/builddir/wasi
          mkdir -p cpython/builddir/build
          cd cpython/builddir/build
          ../../configure --prefix=$(pwd)/install --enable-optimizations
          make
          cd ../wasi
          CONFIG_SITE=../../Tools/wasm/config.site-wasm32-wasi ../../Tools/wasm/wasi-env \
            ../../configure -C --host=wasm32-unknown-wasi --build=$(../../config.guess) \
            --with-build-python=$(pwd)/../build/python --prefix=$(pwd)/install --disable-test-modules
          make
          make install
          cd ../../..

      - name: Publish CPython
        uses: actions/upload-artifact@v3
        with:
          name: cpython-wasi
          path: |
            cpython/builddir/wasi
            !cpython/builddir/wasi/**/*.pyc
            !cpython/builddir/wasi/**/*.whl
            !cpython/builddir/wasi/**/Makefile
            !cpython/builddir/wasi/**/Changelog
            !cpython/builddir/wasi/**/NEWS.txt

  release:
    name: Build spin-python
    needs: cpython
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              arch: "amd64",
              wasiSDK: "linux",
              extension: "",
              buildArgs: "",
              target: "",
              targetDir: "target/release",
            }
          - {
              os: "ubuntu-latest",
              arch: "aarch64",
              wasiSDK: "linux",
              extension: "",
              buildArgs: "\"--target aarch64-unknown-linux-gnu\"",
              target: "aarch64-unknown-linux-gnu",
              targetDir: "target/aarch64-unknown-linux-gnu/release",
          }
          - {
              os: "macos-latest",
              arch: "amd64",
              wasiSDK: "macos",
              extension: "",
              buildArgs: "",
              target: "",
              targetDir: "target/release",
            }
          - {
              os: "macos-latest",
              arch: "aarch64",
              wasiSDK: "macos",
              extension: "",
              buildArgs: "\"--target aarch64-apple-darwin\"",
              target: "aarch64-apple-darwin",
              targetDir: "target/aarch64-apple-darwin/release/",
            }
          - {
              os: "windows-latest",
              arch: "amd64",
              wasiSDK: "",
              extension: ".exe",
              buildArgs: "",
              target: "",
              targetDir: "target/release",
            }
    steps:
      - uses: actions/checkout@v3
      - name: Install latest Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          target: ${{ matrix.config.target }}

      - name: set the release version (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: set the release version (main)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV

      - name: lowercase the runner OS name
        shell: bash
        run: |
          OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          echo "RUNNER_OS=$OS" >> $GITHUB_ENV

      - name: "Install Wasm Rust target"
        shell: bash
        run: rustup target add wasm32-wasi

      - name: Setup WASI-SDK
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd /tmp
          curl -LO https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-${{ matrix.config.wasiSDK }}.tar.gz
          tar -xf wasi-sdk-16.0-${{ matrix.config.wasiSDK }}.tar.gz

          sudo mv wasi-sdk-16.0 /opt/wasi-sdk

      - name: Setup WASI-SDK on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          curl -LO https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-mingw.tar.gz
          tar -xf wasi-sdk-16.0-mingw.tar.gz

      - name: Download CPython
        uses: actions/download-artifact@v3
        with:
          name: cpython-wasi
          path: cpython/builddir/wasi

      - name: setup for cross-compiled linux aarch64 build
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml

      - name: Build spin-python
        shell: bash
        run: |
          if [ "${{ runner.os}}" == "Windows" ]; then
          export WASI_SDK_PATH="$(cygpath -w $(pwd)/wasi-sdk-16.0)"
          fi
          make BUILD_TARGET=${{ matrix.config.buildArgs  }}

      - name: Package as plugins tar
        shell: bash
        run: |
          mkdir -v _dist
          cp ${{ matrix.config.targetDir }}/spin-python${{ matrix.config.extension }} _dist/py2wasm${{ matrix.config.extension }}
          cp  LICENSE _dist/py2wasm.license
          cd _dist
          tar czf py2wasm-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz py2wasm.license py2wasm${{ matrix.config.extension }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
            name: py2wasm-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz
            path: _dist/py2wasm-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz

      - name: upload binary to Github release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _dist/py2wasm-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz
          tag: ${{ github.ref }}

  checksums:
    name: generate checksums
    runs-on: ubuntu-latest
    needs: release
    steps:

      - name: set the release version (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: download release assets
        uses: actions/download-artifact@v3

      - name: generate checksums
        run: |
          ls -lh
          sha256sum py2wasm*.tar.gz/py2wasm*.tar.gz > checksums-${{ env.RELEASE_VERSION }}.txt

      - name: upload checksums to Github release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: checksums-${{ env.RELEASE_VERSION }}.txt
          tag: ${{ github.ref }}
