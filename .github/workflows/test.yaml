name: Test
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths-ignore:
      - "examples/**"
      - "README.md"
      - "release-process.md"
      - "templates/**"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - name: Install latest Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          components: clippy, rustfmt

      - name: Cache CPython
        id: cache-cpython-wasi
        uses: actions/cache@v3
        with:
          path: cpython/builddir/wasi
          key: ${{ runner.os }}-cpython-wasi

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ runner.os }}-lint-${{ hashFiles('./Cargo.lock') }}"
          cache-on-failure: "true"

      - name: "Install Wasm Rust target"
        shell: bash
        run: rustup target add wasm32-wasi

      - name: Setup WASI-SDK
        shell: bash
        run: |
          cd /tmp
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk-16.0-linux.tar.gz
          tar -xf wasi-sdk-16.0-linux.tar.gz
          cp -r wasi-sdk-16.0 /opt/wasi-sdk

      - name: Build CPython
        if: steps.cache-cpython-wasi.outputs.cache-hit != 'true'
        shell: bash
        run: |
          git submodule update --init --recursive
          mkdir -p cpython/builddir/wasi
          mkdir -p cpython/builddir/build
          cd cpython/builddir/build
          ../../configure --prefix=$(pwd)/install --enable-optimizations
          make
          cd ../wasi
          CONFIG_SITE=../../Tools/wasm/config.site-wasm32-wasi ../../Tools/wasm/wasi-env \
            ../../configure -C --host=wasm32-unknown-wasi --build=$(../../config.guess) \
            --with-build-python=$(pwd)/../build/python --prefix=$(pwd)/install --disable-test-modules
          make
          make install
          cd ../../..

      - name: Lint
        shell: bash
        run: |
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features

      - name: Build spin-python-engine
        shell: bash
        run: make

      - name: Install spin
        uses: engineerd/configurator@v0.0.8
        with:
          name: "spin"
          url: "https://github.com/fermyon/spin/releases/download/v0.9.0/spin-v0.9.0-linux-amd64.tar.gz"
          pathInArchive: "spin"

      - name: Install pipenv
        shell: bash
        run: python3 -m pip install --user pipenv

      - name: Run Test
        shell: bash
        run: |
          cd test
          ./test.sh
